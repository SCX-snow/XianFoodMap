# -*- coding: utf-8 -*-
import sys
import sqlite3
import os
from random import randint
import webbrowser

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PySide6 import QtCore, QtWidgets, QtWebEngineWidgets
from PySide6.QtCore import QEventLoop
from PySide6.QtGui import QPixmap
from PySide6.QtWidgets import QApplication, QMainWindow
from qfluentwidgets import LineEdit, PushButton, ListWidget

lists = []


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("西安美食地图")
        MainWindow.resize(1200, 620)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.mapshow = QtWebEngineWidgets.QWebEngineView(self.centralwidget)
        self.mapshow.setGeometry(QtCore.QRect(0, 0, 700, 620))
        self.mapshow.setObjectName("mapshow")
        with open('map.html', 'r', encoding='utf-8') as f:
            html = f.read()
        self.mapshow.setHtml(html)
        self.search = LineEdit(self.centralwidget)
        self.search.setGeometry(QtCore.QRect(710, 180, 231, 31))
        self.search.setObjectName("search")
        self.searchButton = PushButton(self.centralwidget)
        self.searchButton.setGeometry(QtCore.QRect(940, 180, 71, 31))
        self.searchButton.setObjectName("searchButton")
        self.searchButton.clicked.connect(self.searchit)
        self.gotoButton = PushButton(self.centralwidget)
        self.gotoButton.setGeometry(QtCore.QRect(1110, 180, 81, 31))
        self.gotoButton.setObjectName("gotoButton")
        self.gotoButton.clicked.connect(self.gotoit)
        self.photoView = QtWidgets.QLabel(self.centralwidget)
        self.photoView.setGeometry(QtCore.QRect(700, 250, 490, 306))
        self.photoView.setObjectName("photoView")
        self.photoView.setScaledContents(True)
        self.photoView.setPixmap(QPixmap('main.jpg'))
        self.list = ListWidget(self.centralwidget)
        self.list.setGeometry(QtCore.QRect(710, 0, 481, 171))
        self.list.setObjectName("list")
        self.list.setWordWrap(True)
        self.list.clicked.connect(self.listClicked)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(930, 220, 54, 12))
        self.label.setObjectName("label")
        self.videoButton = PushButton(self.centralwidget)
        self.videoButton.setGeometry(QtCore.QRect(1130, 560, 71, 31))
        self.videoButton.setObjectName("videoButton")
        self.videoButton.clicked.connect(self.video)
        self.switchButton = PushButton(self.centralwidget)
        self.switchButton.setGeometry(QtCore.QRect(710, 560, 81, 31))
        self.switchButton.setObjectName("switchButton")
        self.switchButton.clicked.connect(self.hot)
        self.resetButton = PushButton(self.centralwidget)
        self.resetButton.setGeometry(QtCore.QRect(790, 560, 81, 31))
        self.resetButton.setObjectName("resetButton")
        self.resetButton.clicked.connect(self.resetMap)
        self.randomButton = PushButton(self.centralwidget)
        self.randomButton.setGeometry(QtCore.QRect(1020, 180, 81, 31))
        self.randomButton.setObjectName("randomButton")
        self.randomButton.clicked.connect(self.randomChose)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1200, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "西安美食地图"))
        self.searchButton.setText(_translate("MainWindow", "搜索"))
        self.gotoButton.setText(_translate("MainWindow", "带我到这"))
        self.label.setText(_translate("MainWindow", "图片预览"))
        self.videoButton.setText(_translate("MainWindow", "观看视频"))
        self.switchButton.setText(_translate("MainWindow", "打开热力图"))
        self.resetButton.setText(_translate("MainWindow", "恢复默认"))
        self.randomButton.setText(_translate("MainWindow", "随机推荐"))


    def defaultSet(self):
        for i in range(len(lists)):
            self.list.addItem(lists[i][1])
            js = "addMarker([{}, {}], '{}',{});".format(lists[i][3], lists[i][4], lists[i][1], lists[i][0])
            self.mapshow.page().runJavaScript(js)

    def addMarker(self, name):
        # 在地图上添加标记
        js = "addMarker([108.940174, 34.341568], 'Shanxi');".format(name)
        self.mapshow.page().runJavaScript(js)

    def setCenter(self, lat, lng):
        # 将地图中心设置为给定的经纬度
        js = "map.setCenter(new AMap.LngLat({}, {}));".format(lat, lng)
        self.mapshow.page().runJavaScript(js)

    def setzoom(self, zoom):
        js = "map.setZoom({});".format(zoom)
        self.mapshow.page().runJavaScript(js)

    def resetMap(self):
        # 调用函数更新地图
        with open('map.html', 'r', encoding='utf-8') as f:
            html = f.read()
        self.mapshow.setHtml(html)
        wait = QEventLoop()
        ui.mapshow.loadFinished.connect(wait.quit)
        wait.exec_()
        for i in range(len(lists)):
            js = "addMarker([{}, {}], '{}',{});".format(lists[i][3], lists[i][4], lists[i][1], lists[i][0])
            self.mapshow.page().runJavaScript(js)

    def listClicked(self):
        selected_row = self.list.currentRow()
        self.resetMap()
        self.defaultSet()
        self.setCenter(lists[selected_row][3], lists[selected_row][4])
        self.setzoom(18)
        file = open('./.temp.jpg', 'wb')
        file.write(lists[selected_row][5])
        file.close()
        self.photoView.setScaledContents(True)
        self.photoView.setPixmap(QPixmap('./.temp.jpg'))
        os.remove('./.temp.jpg')

    def randomChose(self):
        ran = randint(1, len(lists)) - 1
        while self.list.currentRow() == ran:
            ran = randint(1, len(lists)) - 1
        self.list.setCurrentItem(self.list.item(ran))
        self.listClicked()

    def searchit(self):
        target = self.search.text()
        self.list.clear()
        if target is None:
            for i in range(len(lists)):
                self.list.addItem(lists[i][1])
        else:
            for i in range(len(lists)):
                if lists[i][1].find(target) != -1:
                    self.list.addItem(lists[i][1])

    def gotoit(self):
        with open('go.html', 'r', encoding='utf-8') as f:
            html = f.read()
        self.mapshow.setHtml(html)
        wait = QEventLoop()
        ui.mapshow.loadFinished.connect(wait.quit)
        wait.exec_()
        js = "initMap({},{});".format(lists[self.list.currentRow()][3], lists[self.list.currentRow()][4])
        self.mapshow.page().runJavaScript(js)

    def video(self):
        webbrowser.open('https://www.bilibili.com/video/{}'.format(lists[self.list.currentRow()][2]))

    def hot(self):
        with open('hot.html', 'r', encoding='utf-8') as f:
            html = f.read()
        self.mapshow.setHtml(html)
        wait = QEventLoop()
        ui.mapshow.loadFinished.connect(wait.quit)
        wait.exec_()
        for i in range(len(lists)):
            js = '''marks[{}]={{"lnglat":[{},{}]}}'''.format(i, lists[i][3], lists[i][4])
            self.mapshow.page().runJavaScript(js)
        js = "lay()"
        self.mapshow.page().runJavaScript(js)


def getData():
    global lists
    conn = sqlite3.connect("work.db")
    cursor = conn.cursor()
    DbList = cursor.execute("SELECT * FROM Food")
    lists = DbList.fetchall()
    cursor.close()
    conn.close()


if __name__ == '__main__':
    getData()
    app = QApplication(sys.argv)
    window = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(window)
    window.show()
    loop = QEventLoop()
    ui.mapshow.loadFinished.connect(loop.quit)
    loop.exec_()
    ui.defaultSet()
    sys.exit(app.exec_())
